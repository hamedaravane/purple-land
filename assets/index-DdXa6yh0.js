var e=Object.defineProperty,t=(t,o,s)=>((t,o,s)=>o in t?e(t,o,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[o]=s)(t,"symbol"!=typeof o?o+"":o,s);import{r as o,g as s}from"./phaser-sXZmPM0a.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const o of e)if("childList"===o.type)for(const e of o.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();var r=o();const i=s(r);class a extends r.Scene{constructor(){super("Preloader")}init(){this.add.image(512,384,"background"),this.add.rectangle(512,384,468,32).setStrokeStyle(1,16777215);const e=this.add.rectangle(282,384,4,28,16777215);this.load.on("progress",(t=>{e.width=4+460*t}))}preload(){this.load.setPath("assets"),this.load.image("logo","logo.png")}create(){this.scene.start("BubbleShooterScene")}}class n extends i.Scene{constructor(){super({key:"BubbleShooterScene"}),t(this,"popSound"),t(this,"shootSound"),t(this,"scoreText"),t(this,"levelText"),t(this,"score",0),t(this,"level",1)}preload(){this.load.spritesheet("bubbles","assets/images/bubbles.png",{frameWidth:64,frameHeight:64,margin:4,spacing:4}),this.load.audio("pop","assets/audio/pop.wav"),this.load.audio("shoot","assets/audio/shoot.wav")}create(){this.createAudio(),this.createUI(),this.createTiles(),this.createInitialBubbles(),this.createShooterBubble(),this.createAimer()}update(e,t){console.log(`on update scene, time ${e} and delta: ${t}`),console.log(`on update scene, popSound: ${this.popSound}`),console.log(`on update scene, shootSound: ${this.shootSound}`),console.log(`on update scene, scoreText: ${this.scoreText}`),console.log(`on update scene, levelText: ${this.levelText}`)}createAudio(){this.popSound=this.sound.add("pop"),this.shootSound=this.sound.add("shoot")}createUI(){this.scoreText=this.add.text(10,10,`Score: ${this.score}`,{fontSize:"24px",color:"#ffffff"}),this.levelText=this.add.text(10,40,`Level: ${this.level}`,{fontSize:"24px",color:"#ffffff"})}createTiles(){}createInitialBubbles(){}createShooterBubble(){}createAimer(){}}const c={type:Phaser.AUTO,width:600,height:800,parent:"game-container",backgroundColor:"transparent",scale:{mode:Phaser.Scale.EXPAND,autoCenter:Phaser.Scale.CENTER_BOTH},scene:[a,n],physics:{default:"arcade",arcade:{gravity:{x:0,y:0}}}};new r.Game(c);
