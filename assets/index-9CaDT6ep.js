var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const o=i(s());class h extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("bg","assets/images/background/bg.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json"),this.load.atlas("ui","assets/images/ui/ui.png","assets/images/ui/ui.json")}create(){this.scene.start("MainScene")}}const n={label:"pink",color:15626403},r=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];class a extends o.GameObjects.Sprite{constructor(t,s,i,o,h=n,r=!1,a="bubbles"){super(t,s,i,a,h.label),e(this,"isShooter"),e(this,"color"),e(this,"diameter"),e(this,"gridCoordinates"),this.isShooter=r,this.color=h,this.diameter=o,this.setBubbleSize(),this.initPhysics(),this.scene.add.existing(this)}shot(t,e=600){if(!this.isShooter)return;const s=t.x-this.x,i=t.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const t=s/o,h=i/o;this.body.setVelocity(t*e,h*e)}}setPosition(t,e){return this.scene.tweens.add({targets:this,x:t,y:e,duration:100,ease:"Power2"}),super.setPosition(t,e)}setBubbleSize(){if(this.width>0){const t=this.diameter/this.width;this.setScale(t)}else this.once(o.Loader.Events.COMPLETE,(()=>{const t=this.diameter/this.width;this.setScale(t)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}}const l={even:[[-1,0],[-1,1],[0,-1],[0,1],[1,0],[1,1]],odd:[[-1,-1],[-1,0],[0,-1],[0,1],[1,-1],[1,0]]},c=.85,d=1-c;function b(){const t=Math.floor(Math.random()*r.length);return{label:r[t].label,color:r[t].color}}class u extends o.GameObjects.Group{constructor(t,s,i){super(t),e(this,"rows"),e(this,"cols"),e(this,"cellWidth"),e(this,"cellHeight"),e(this,"bubbleRadius"),e(this,"grid"),this.rows=s,this.cols=i,this.cellWidth=t.scale.width/i,this.bubbleRadius=this.cellWidth/2,this.cellHeight=.866*this.cellWidth;const o=t.scale.height-100-this.cellHeight,h=Math.floor(o/this.cellHeight);this.grid=Array.from({length:h},(()=>Array(i).fill(null)))}createGrid(){for(let t=0;t<this.rows;t++){const e=t%2==0,s=e?this.bubbleRadius:0,i=this.cols-(e?1:0);for(let o=0;o<i;o++){const e=this.normalize(this.bubbleRadius+o*this.cellWidth+s),i=this.normalize(this.bubbleRadius+t*this.cellHeight),h=new a(this.scene,e,i,this.cellWidth,b());h.gridCoordinates={row:t,col:o},this.add(h),this.grid[t][o]=h}}}addBubble(t){const{row:e,col:s}=t.gridCoordinates;this.grid[e][s]=t,this.add(t)}removeBubble(t){const{row:e,col:s}=t.gridCoordinates;this.grid[e]&&this.grid[e][s]===t&&(this.grid[e][s]=null),this.remove(t,!0,!0)}popConnectedBubbles(t){const e=this.findConnectedSameColor(t);e.length>=3&&e.forEach((t=>this.removeBubble(t)))}findConnectedSameColor(t){const e=new Set,s=[];for(s.push(t),e.add(t);s.length>0;){const i=s.shift();e.add(i);const o=this.getNeighbors(i);for(const h of o)e.has(h)||h.color.label!==t.color.label||s.push(h)}return Array.from(e)}getNeighbors(t){const{row:e,col:s}=t.gridCoordinates,i=l[e%2==0?"even":"odd"],o=[];for(const[h,n]of i){const t=e+h,i=s+n;if(this.isValidCell(t,i)){const e=this.grid[t][i];e&&o.push(e)}}return o}snapBubbleToGrid(t){const{snappedX:e,snappedY:s,row:i,col:o}=this.getNearestGridPosition(t.x,t.y);t.setPosition(e,s),t.gridCoordinates={row:i,col:o},this.addBubble(t)}getNearestGridPosition(t,e){let s=Math.round((e-this.bubbleRadius)/this.cellHeight);s<0&&(s=0);const i=s%2==0;let o;o=i?Math.round(t/this.cellWidth-1):Math.round(t/this.cellWidth-.5),o<0&&(o=0);const h=i?this.cellWidth*(o+1):this.cellWidth*(o+.5),n=this.bubbleRadius+s*this.cellHeight;return{snappedX:this.normalize(h),snappedY:this.normalize(n),row:s,col:o}}getChildren(){return super.getChildren()}isValidCell(t,e){return t>=0&&t<this.rows&&e>=0&&e<this.cols}getCellWidth(){return this.cellWidth}normalize(t,e=2){return parseFloat(t.toFixed(e))}}class g extends o.GameObjects.Graphics{constructor(t,s){super(t),e(this,"origin"),e(this,"bubble"),e(this,"dashLength",10),e(this,"gapLength",5),e(this,"aimColor"),e(this,"target"),this.bubble=s,this.origin=new o.Math.Vector2(s.x,s.y),this.target=new o.Math.Vector2(0,0),this.aimColor=s.color.color,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){const t=this.scene.input;t.on("pointerdown",this.onPointerDown,this),t.on("pointermove",this.onPointerMove,this),t.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.updateTarget(t),this.redrawAimingLine(t)}onPointerMove(t){t.isDown&&(this.updateTarget(t),this.redrawAimingLine(t))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(t){this.target.set(t.x,t.y)}redrawAimingLine(t){this.clear(),this.lineStyle(1,this.aimColor);const e=o.Math.Angle.Between(this.origin.x,this.origin.y,t.x,t.y),s=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),i=new o.Math.Vector2(t.x+Math.cos(e)*s,t.y+Math.sin(e)*s);this.drawDashedLine(this.origin,new o.Math.Vector2(t.x,t.y)),this.drawDashedLine(new o.Math.Vector2(t.x,t.y),i)}drawDashedLine(t,e){const s=o.Math.Distance.Between(t.x,t.y,e.x,e.y),i=o.Math.Angle.Between(t.x,t.y,e.x,e.y);let h=s,n=t.clone();for(;h>0;){const t=Math.min(this.dashLength,h),e=new o.Math.Vector2(n.x+Math.cos(i)*t,n.y+Math.sin(i)*t);this.moveTo(n.x,n.y),this.lineTo(e.x,e.y),n.set(e.x+Math.cos(i)*this.gapLength,e.y+Math.sin(i)*this.gapLength),h-=this.dashLength+this.gapLength}this.strokePath()}destroy(...t){const e=this.scene.input;e.off("pointerdown",this.onPointerDown,this),e.off("pointermove",this.onPointerMove,this),e.off("pointerup",this.onPointerUp,this),super.destroy(...t)}}class p{constructor(t,s,i){e(this,"scene"),e(this,"bubbleGrid"),e(this,"aimer"),e(this,"shootingBubble"),this.scene=t,this.bubbleGrid=new u(t,s,i),this.scene.add.existing(this.bubbleGrid)}createGrid(){this.bubbleGrid.createGrid()}spawnNewShootingBubble(){var t;null==(t=this.aimer)||t.destroy(),this.shootingBubble=new a(this.scene,this.scene.scale.width/2,this.scene.scale.height-100,this.bubbleGrid.getCellWidth(),b(),!0),this.aimer=new g(this.scene,this.shootingBubble)}checkCollision(){this.bubbleGrid.getChildren().forEach((t=>{this.isOverlap(this.shootingBubble,t)&&(this.shootingBubble.body.setVelocity(0,0),this.bubbleGrid.snapBubbleToGrid(this.shootingBubble),this.bubbleGrid.popConnectedBubbles(this.shootingBubble),this.spawnNewShootingBubble())}))}isOverlap(t,e){const s=t.x-e.x,i=t.y-e.y;return s*s+i*i<=t.diameter*e.diameter}}class m extends Phaser.Scene{constructor(){super({key:"GameScene"}),e(this,"bubbleManager")}create(){this.add.image(this.scale.width/2,this.scale.height/2,"bg"),this.bubbleManager=new p(this,10,14),this.bubbleManager.createGrid(),this.bubbleManager.spawnNewShootingBubble()}update(){this.bubbleManager.checkCollision()}}const y={green:6810368,yellow:16767754,pink:16550655,purple:12748543,blue:5036798};class w extends Phaser.GameObjects.Container{constructor(t,s,i,o,h,n=52,r=48,a=12){super(t,s,i),e(this,"topGraphics"),e(this,"bottomGraphics"),e(this,"labelText"),e(this,"originalTopY"),e(this,"pressedTopY");const l=y[o],b=function(t,e=.25){let s=t>>16&255,i=t>>8&255,o=255&t;return s=Math.floor(s*(1-e)),i=Math.floor(i*(1-e)),o=Math.floor(o*(1-e)),(s<<16)+(i<<8)+o}(l);this.bottomGraphics=t.add.graphics(),this.drawRoundedRect(this.bottomGraphics,b,n,r,a,0,0),this.add(this.bottomGraphics),this.topGraphics=t.add.graphics(),this.drawRoundedRect(this.topGraphics,l,n,r*c,a,0,0),this.add(this.topGraphics),h&&(this.labelText=t.add.text(0,0,h,{fontFamily:"LuckiestGuy",fontSize:"18px",color:"#FFFFFF"}),this.labelText.setOrigin(.5,.5),this.labelText.y=r*c/2,this.add(this.labelText)),this.originalTopY=this.topGraphics.y,this.pressedTopY=this.originalTopY+r*d,this.setSize(n,r),this.setInteractive(new Phaser.Geom.Rectangle(0,0,n,r),Phaser.Geom.Rectangle.Contains),this.on("pointerdown",this.onPointerDown,this),this.on("pointerup",this.onPointerUp,this),this.on("pointerout",this.onPointerOut,this),t.add.existing(this)}drawRoundedRect(t,e,s,i,o,h,n){t.clear(),t.fillStyle(e),t.fillRoundedRect(-s/2+h,n,s,i,o)}onPointerDown(){this.topGraphics.y=this.pressedTopY,this.bottomGraphics.y=this.pressedTopY,this.bottomGraphics.scaleY=c,this.labelText&&(this.labelText.y+=this.height*d)}onPointerUp(){this.topGraphics.y=this.originalTopY,this.bottomGraphics.y=this.originalTopY,this.bottomGraphics.scaleY=1,this.labelText&&(this.labelText.y-=this.height*d)}onPointerOut(){this.topGraphics.y=this.originalTopY,this.bottomGraphics.y=this.originalTopY,this.bottomGraphics.scaleY=1}}class f{constructor(t){e(this,"scene"),e(this,"screenWidth"),e(this,"screenHeight"),e(this,"bottomNavigation"),e(this,"topNavigation"),e(this,"contentContainer"),this.scene=t,this.screenWidth=this.scene.scale.width,this.screenHeight=this.scene.scale.height;const s=.12*this.screenHeight,i=this.screenWidth/2,o=this.screenHeight/2;this.scene.add.image(i,o,"bg"),this.bottomNavigation=new Phaser.GameObjects.Container(this.scene,i,this.screenHeight-s/2);const h=new Phaser.GameObjects.Rectangle(this.scene,0,0,this.screenWidth,s,10066329,5).setBlendMode(Phaser.BlendModes.MULTIPLY);this.bottomNavigation.add(h);const n=[{label:"1",color:"pink"},{label:"2",color:"purple"},{label:"3",color:"blue"},{label:"4",color:"yellow"}],r=n.length,a=this.screenWidth/(r+1);n.forEach(((t,e)=>{const o=(e+1)*a-i,h=-s/3,n=new w(this.scene,o,h,t.color,t.label,48,48);this.bottomNavigation.add(n)})),this.topNavigation=new Phaser.GameObjects.Container(this.scene,i,0),this.contentContainer=new Phaser.GameObjects.Container(this.scene,i,0),this.scene.add.existing(this.bottomNavigation),this.scene.add.existing(this.topNavigation),this.scene.add.existing(this.contentContainer)}}class x extends o.Scene{constructor(){super({key:"MainScene"})}create(){new f(this)}}const G={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[h,x,m],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(G)}));
