var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const o=i(s());class h extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}const n=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];function r(){const e=Math.floor(Math.random()*n.length);return{label:n[e].label,color:n[e].color}}class l extends o.GameObjects.Sprite{constructor(e,s,i,o,h="static",n="bubbles",r){super(e,s,i,n,r.label),t(this,"_bubbleType"),t(this,"_color"),t(this,"_diameter"),t(this,"neighbors"),this._bubbleType=h,this._color=r,this._diameter=o,this.neighbors=new Set,this.scene.add.existing(this),this.setBubbleSize(),this.initPhysics()}get color(){return this._color}get bubbleType(){return this._bubbleType}set bubbleType(e){this._bubbleType=e}pop(){this.destroy()}fall(){this.body instanceof o.Physics.Arcade.Body&&(this.body.enable=!0,this.body.setVelocityY(200))}shot(e,t=600){const s=e.x-this.x,i=e.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const e=s/o,h=i/o;this.body.setVelocity(e*t,h*t)}}disablePhysics(){this.body instanceof o.Physics.Arcade.Body&&(this.body.setVelocity(0,0),this.body.enable=!1)}addNeighbor(e){this.neighbors.add(e)}removeNeighbor(e){this.neighbors.delete(e)}checkCollision(e){for(const t of e.getBubbles())if(this.isOverlapping(t))return t;return null}snapTo(e,t){console.log("Snapping bubble",{from:{x:this.x,y:this.y},to:{x:e,y:t}}),this.scene.tweens.add({targets:this,x:e,y:t,duration:100,ease:"Power2"})}isOverlapping(e){const t=this.x-e.x,s=this.y-e.y;return Math.sqrt(t*t+s*s)<this._diameter}setBubbleSize(){if(this.width>0){const e=this._diameter/this.width;this.setScale(e)}else this.once(o.Loader.Events.COMPLETE,(()=>{const e=this._diameter/this.width;this.setScale(e)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}destroy(...e){this.neighbors.clear(),super.destroy(...e)}}class b extends o.GameObjects.Graphics{constructor(e,s){super(e),t(this,"origin"),t(this,"bubble"),t(this,"dashLength",10),t(this,"gapLength",5),t(this,"aimColor"),t(this,"target"),this.bubble=s,this.origin=new o.Math.Vector2(s.x,s.y),this.target=new o.Math.Vector2(0,0),this.aimColor=s.color.color,e.add.existing(this),this.registerInputListeners()}registerInputListeners(){const e=this.scene.input;e.on("pointerdown",this.onPointerDown,this),e.on("pointermove",this.onPointerMove,this),e.on("pointerup",this.onPointerUp,this)}onPointerDown(e){this.updateTarget(e),this.redrawAimingLine(e)}onPointerMove(e){e.isDown&&(this.updateTarget(e),this.redrawAimingLine(e))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(e){this.target.set(e.x,e.y)}redrawAimingLine(e){this.clear(),this.lineStyle(1,this.aimColor);const t=o.Math.Angle.Between(this.origin.x,this.origin.y,e.x,e.y),s=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),i=new o.Math.Vector2(e.x+Math.cos(t)*s,e.y+Math.sin(t)*s);this.drawDashedLine(this.origin,new o.Math.Vector2(e.x,e.y)),this.drawDashedLine(new o.Math.Vector2(e.x,e.y),i)}drawDashedLine(e,t){const s=o.Math.Distance.Between(e.x,e.y,t.x,t.y),i=o.Math.Angle.Between(e.x,e.y,t.x,t.y);let h=s,n=e.clone();for(;h>0;){const e=Math.min(this.dashLength,h),t=new o.Math.Vector2(n.x+Math.cos(i)*e,n.y+Math.sin(i)*e);this.moveTo(n.x,n.y),this.lineTo(t.x,t.y),n.set(t.x+Math.cos(i)*this.gapLength,t.y+Math.sin(i)*this.gapLength),h-=this.dashLength+this.gapLength}this.strokePath()}destroy(...e){const t=this.scene.input;t.off("pointerdown",this.onPointerDown,this),t.off("pointermove",this.onPointerMove,this),t.off("pointerup",this.onPointerUp,this),super.destroy(...e)}}class a{constructor(e,s,i,o,h){t(this,"scene"),t(this,"bubblesGroup"),t(this,"bubbleMap"),t(this,"grid"),t(this,"bubbleWidth"),t(this,"bubbleRadius"),t(this,"rowHeight"),this.scene=e,this.bubbleWidth=h,this.bubbleRadius=this.bubbleWidth/2,this.rowHeight=.866*this.bubbleWidth,this.bubblesGroup=new Phaser.GameObjects.Group(this.scene),this.bubbleMap=new Map,this.grid=Array.from({length:i},(()=>Array(s).fill(null))),this.createGrid(s,i,o)}handleBubbleCollision(e,t){if(t.color.color===e.color.color)return this.removeBubble(t),void this.removeBubble(e);const{x:s,y:i}=this.findNearestPositionForTargetBubble(t);e.body.setVelocity(0,0),e.snapTo(s,i),e.bubbleType="static",this.addBubble(e)}addBubble(e){const t=this.normalize(e.x),s=this.normalize(e.y);this.bubblesGroup.add(e),this.bubbleMap.set(`${t},${s}`,e)}removeBubble(e){const t=this.normalize(e.x),s=this.normalize(e.y);this.bubblesGroup.remove(e,!1,!1),this.bubbleMap.delete(`${t},${s}`),e.destroy()}isPositionEmpty(e,t){const s=this.normalize(e),i=this.normalize(t);return!this.bubbleMap.has(`${s},${i}`)}getBubbles(){return this.bubblesGroup.getChildren()}createGrid(e,t,s){let i=0;for(let o=0;o<t;o++){const t=o%2==0,h=t?this.bubbleRadius:0,n=e-(t?1:0);for(let e=0;e<n;e++){i++;const t=this.normalize(this.bubbleRadius+e*this.bubbleWidth+h),n=this.normalize(this.bubbleRadius+o*this.rowHeight),b=new l(this.scene,t,n,this.bubbleWidth,"static",s,r());console.log(`Bubble ${i} position: ${t}, ${n}`),this.bubblesGroup.add(b),this.bubbleMap.set(`${t},${n}`,b),this.grid[o][e]=b}}}findNearestPositionForTargetBubble(e){const t=this.getPotentialNeighborPositions(e.x,e.y);for(const{x:s,y:i}of t)if(this.isPositionEmpty(s,i)){const e=this.normalize(s),t=this.normalize(i);return console.log("Nearest empty position found",{x:e,y:t}),{x:e,y:t}}return console.warn("No empty position found, snapping to target bubble"),{x:this.normalize(e.x),y:this.normalize(e.y)}}getPotentialNeighborPositions(e,t){return[{x:e+this.bubbleWidth,y:t},{x:e-this.bubbleWidth,y:t},{x:e+this.bubbleRadius,y:t+this.rowHeight},{x:e-this.bubbleRadius,y:t+this.rowHeight},{x:e+this.bubbleRadius,y:t-this.rowHeight},{x:e-this.bubbleRadius,y:t-this.rowHeight}]}normalize(e,t=2){return parseFloat(e.toFixed(t))}}class c extends Phaser.Scene{constructor(){super({key:"GameScene"}),t(this,"shootingBubble",null),t(this,"aimer",null),t(this,"cols",6),t(this,"rows",2),t(this,"bubbleCluster")}create(){const e=this.scale.width/this.cols;this.add.image(this.scale.width/2,this.scale.height/2,"background"),this.bubbleCluster=new a(this,this.cols,this.rows,"bubbles",e),this.spawnShootingBubble(e)}spawnShootingBubble(e){var t;null==(t=this.aimer)||t.destroy(),this.shootingBubble=new l(this,this.scale.width/2,this.scale.height-100,e,"shooting","bubbles",r()),this.aimer=new b(this,this.shootingBubble)}handleCollision(){var e;const t=null==(e=this.shootingBubble)?void 0:e.checkCollision(this.bubbleCluster);this.shootingBubble&&t&&(this.bubbleCluster.handleBubbleCollision(this.shootingBubble,t),this.spawnShootingBubble(this.scale.width/this.cols))}isBubbleMoving(){var e;return(null==(e=this.shootingBubble)?void 0:e.body).velocity.length()>0}update(){this.isBubbleMoving()&&this.handleCollision()}}const u={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[h,c],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(u)}));
