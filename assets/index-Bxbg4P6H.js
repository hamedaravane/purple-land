var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const o=i(s());class h extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}class n extends o.GameObjects.Sprite{constructor(t,s,i,o,h="static",n="bubbles",r){super(t,s,i,n,r.label),e(this,"_bubbleType"),e(this,"_color"),e(this,"_width"),this._bubbleType=h,this._color=r,this._width=o,this.scene.add.existing(this),this.setBubbleSize(),this.initPhysics()}get color(){return this._color}shot(t,e=600){const s=t.x-this.x,i=t.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const t=s/o,h=i/o;this.body.setVelocity(t*e,h*e)}}checkCollision(t){for(const e of t.getBubbles())if(this.isOverlapping(e))return e;return null}snapTo(t,e){this.scene.tweens.add({targets:this,x:t,y:e,duration:100,ease:"Power2"})}isOverlapping(t){const e=this.x-t.x,s=this.y-t.y;return Math.sqrt(e*e+s*s)<this._width}setBubbleSize(){if(this.width>0){const t=this._width/this.width;this.setScale(t)}else this.once(o.Loader.Events.COMPLETE,(()=>{const t=this._width/this.width;this.setScale(t)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}destroy(...t){super.destroy(...t)}}class r extends o.GameObjects.Graphics{constructor(t,s){super(t),e(this,"origin"),e(this,"bubble"),e(this,"dashLength",10),e(this,"gapLength",5),e(this,"aimColor"),e(this,"target"),this.bubble=s,this.origin=new o.Math.Vector2(s.x,s.y),this.target=new o.Math.Vector2(0,0),this.aimColor=s.color.color,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){const t=this.scene.input;t.on("pointerdown",this.onPointerDown,this),t.on("pointermove",this.onPointerMove,this),t.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.updateTarget(t),this.redrawAimingLine(t)}onPointerMove(t){t.isDown&&(this.updateTarget(t),this.redrawAimingLine(t))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(t){this.target.set(t.x,t.y)}redrawAimingLine(t){this.clear(),this.lineStyle(1,this.aimColor);const e=o.Math.Angle.Between(this.origin.x,this.origin.y,t.x,t.y),s=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),i=new o.Math.Vector2(t.x+Math.cos(e)*s,t.y+Math.sin(e)*s);this.drawDashedLine(this.origin,new o.Math.Vector2(t.x,t.y)),this.drawDashedLine(new o.Math.Vector2(t.x,t.y),i)}drawDashedLine(t,e){const s=o.Math.Distance.Between(t.x,t.y,e.x,e.y),i=o.Math.Angle.Between(t.x,t.y,e.x,e.y);let h=s,n=t.clone();for(;h>0;){const t=Math.min(this.dashLength,h),e=new o.Math.Vector2(n.x+Math.cos(i)*t,n.y+Math.sin(i)*t);this.moveTo(n.x,n.y),this.lineTo(e.x,e.y),n.set(e.x+Math.cos(i)*this.gapLength,e.y+Math.sin(i)*this.gapLength),h-=this.dashLength+this.gapLength}this.strokePath()}destroy(...t){const e=this.scene.input;e.off("pointerdown",this.onPointerDown,this),e.off("pointermove",this.onPointerMove,this),e.off("pointerup",this.onPointerUp,this),super.destroy(...t)}}const l=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];function a(){const t=Math.floor(Math.random()*l.length);return{label:l[t].label,color:l[t].color}}class c{constructor(t,s,i){e(this,"scene"),e(this,"bubblesGroup"),e(this,"shootingBubble"),e(this,"rows"),e(this,"cols"),e(this,"cellWidth"),e(this,"cellHeight"),e(this,"bubbleRadius"),e(this,"onOverlap",(()=>{this.shootingBubble.body.setVelocity(0,0);const t=this.getNearestGridPosition(this.shootingBubble.x,this.shootingBubble.y);this.shootingBubble.snapTo(t.x,t.y),this.addExistingBubble(this.shootingBubble)})),this.scene=t,this.bubblesGroup=this.scene.add.group(),this.rows=s,this.cols=i,this.cellWidth=this.scene.scale.width/i,this.bubbleRadius=this.cellWidth/2,this.cellHeight=.86602540378*this.cellWidth}createGrid(){for(let t=0;t<this.rows;t++){const e=t%2==0,s=this.cols-(e?1:0);for(let i=0;i<s;i++){const e=this.getPosition(i,t),s=new n(this.scene,e.x,e.y,this.cellWidth,"static","bubbles",a());this.bubblesGroup.add(s)}}}spawnShootingBubble(){this.shootingBubble=new n(this.scene,this.scene.scale.width/2,this.scene.scale.height-100,this.cellWidth,"shooting","bubbles",{label:"cyan",color:63127}),this.shootingBubble.name="shooting",new r(this.scene,this.shootingBubble),this.checkOverlapForBubbleGroup()}addExistingBubble(t){return this.bubblesGroup.add(t),t}removeBubble(t){this.bubblesGroup.remove(t,!0,!0)}getNearestGridPosition(t,e){let s=Math.round((e-this.bubbleRadius)/this.cellHeight);s<0&&(s=0);const i=s%2==0;let o;o=i?Math.round(t/this.cellWidth-1):Math.round(t/this.cellWidth-.5),o<0&&(o=0);const h=i?this.cellWidth*(o+1):this.cellWidth*(o+.5),n=this.bubbleRadius+s*this.cellHeight;return{x:this.normalize(h),y:this.normalize(n)}}checkOverlapForBubbleGroup(){this.bubblesGroupChildren.forEach((t=>{this.addOverlap(t)}))}addOverlap(t){return this.scene.physics.add.overlap(this.shootingBubble,t,this.onOverlap,void 0,this)}get bubblesGroupChildren(){return this.bubblesGroup.getChildren()}getPosition(t,e){const s=e%2==0?this.bubbleRadius:0;return{x:this.normalize(this.bubbleRadius+t*this.cellWidth+s),y:this.normalize(this.bubbleRadius+e*this.cellHeight)}}normalize(t,e=2){return parseFloat(t.toFixed(e))}}class b extends Phaser.Scene{constructor(){super({key:"GameScene"}),e(this,"bubbleManager")}create(){this.bubbleManager=new c(this,2,5),this.bubbleManager.createGrid(),this.bubbleManager.spawnShootingBubble()}}const d={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[h,b],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(d)}));
