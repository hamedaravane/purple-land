var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const o=i(s());class n extends o.Scene{constructor(){super({key:"BootScene"})}preload(){}create(){this.scene.start("GameScene")}}class r extends Phaser.GameObjects.Sprite{constructor(e,s,i,o,n="static",r=16777215,h){super(e,s,i,o,h),t(this,"bubbleType"),t(this,"_color"),this.bubbleType=n,this._color=r,e.add.existing(this),"shooting"===n&&this.enablePhysics()}get color(){return this._color}pop(){this.destroy()}shot(e,t=600){if("shooting"===this.bubbleType){const s=e.x-this.x,i=e.y-this.y,o=Math.sqrt(s**2+i**2);if(o>0){const e=s/o,n=i/o;this.body.setVelocity(e*t,n*t)}}}enablePhysics(){if(!this.scene.physics.world)return void console.error("Physics system not initialized in the scene.");this.scene.physics.add.existing(this);const e=this.body;e.setCollideWorldBounds(!0),e.setVelocity(0,0)}disablePhysics(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.setVelocity(0,0),this.body.enable=!1)}}class h extends o.GameObjects.Graphics{constructor(e,s){super(e),t(this,"scene"),t(this,"fromX"),t(this,"fromY"),t(this,"color"),t(this,"bubble"),t(this,"targetX",0),t(this,"targetY",0),this.scene=e,this.fromX=s.x,this.fromY=s.y,this.color=s.color,this.bubble=s,e.add.existing(this),this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.input.on("pointerup",this.onPointerUp,this)}onPointerDown(){this.clear()}onPointerMove(e){if(e.isDown){this.clear(),this.lineStyle(2,this.color);const t=10,s=5;this.drawDashedLine(this.fromX,this.fromY,e.x,e.y,t,s),this.targetX=e.x,this.targetY=e.y;const i=o.Math.Angle.Between(this.fromX,this.fromY,e.x,e.y),n=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),r=e.x+Math.cos(i)*n,h=e.y+Math.sin(i)*n;this.drawDashedLine(e.x,e.y,r,h,t,s)}}onPointerUp(){this.clear(),0!==this.targetX&&0!==this.targetY&&this.bubble.shot({x:this.targetX,y:this.targetY})}drawDashedLine(e,t,s,i,n,r){const h=o.Math.Distance.Between(e,t,s,i),c=o.Math.Angle.Between(e,t,s,i);let a=h,l=e,d=t;for(;a>0;){const e=Math.min(n,a),t=l+Math.cos(c)*e,s=d+Math.sin(c)*e;this.moveTo(l,d),this.lineTo(t,s),a-=n,l=t+Math.cos(c)*r,d=s+Math.sin(c)*r,a-=r}this.strokePath()}}class c extends o.Scene{constructor(){super({key:"GameScene"}),t(this,"shootingBubble")}create(){this.shootingBubble=new r(this,this.cameras.main.width/2,this.cameras.main.height-100,"","shooting"),new h(this,this.shootingBubble)}}const a={type:o.AUTO,width:600,height:800,scene:[n,c],parent:"game-container",physics:{default:"arcade",arcade:{gravity:{x:NaN,y:0}}}};window.addEventListener("load",(()=>{new o.Game(a)}));
