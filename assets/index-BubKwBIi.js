var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const o=i(s());class h extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}class r extends o.GameObjects.Graphics{constructor(t,s){super(t),e(this,"fromX"),e(this,"fromY"),e(this,"color"),e(this,"bubble"),e(this,"targetX",0),e(this,"targetY",0),e(this,"dashLength",10),e(this,"gapLength",5),this.fromX=s.x,this.fromY=s.y,this.color=s.color.color,this.bubble=s,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.input.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.clear(),this.updateTargetPosition(t),this.drawAimLine(t)}onPointerMove(t){t.isDown&&(this.clear(),this.updateTargetPosition(t),this.drawAimLine(t))}onPointerUp(){this.clear(),this.targetX&&this.targetY&&this.bubble.shot({x:this.targetX,y:this.targetY})}updateTargetPosition(t){this.targetX=t.x,this.targetY=t.y}drawAimLine(t){this.lineStyle(1,this.color),this.drawDashedLine(this.fromX,this.fromY,t.x,t.y);const e=o.Math.Angle.Between(this.fromX,this.fromY,t.x,t.y),s=Math.sqrt(this.scene.scale.width**2+this.scene.scale.height**2),i=t.x+Math.cos(e)*s,h=t.y+Math.sin(e)*s;this.drawDashedLine(t.x,t.y,i,h)}drawDashedLine(t,e,s,i){const h=o.Math.Distance.Between(t,e,s,i),r=o.Math.Angle.Between(t,e,s,i);let n=h,a=t,l=e;for(;n>0;){const t=Math.min(this.dashLength,n),e=a+Math.cos(r)*t,s=l+Math.sin(r)*t;this.moveTo(a,l),this.lineTo(e,s),n-=this.dashLength,a=e+Math.cos(r)*this.gapLength,l=s+Math.sin(r)*this.gapLength,n-=this.gapLength}this.strokePath()}destroy(...t){this.scene&&this.scene.input&&(this.scene.input.off("pointerdown",this.onPointerDown,this),this.scene.input.off("pointermove",this.onPointerMove,this),this.scene.input.off("pointerup",this.onPointerUp,this)),super.destroy(...t)}}class n extends Phaser.GameObjects.Sprite{constructor(t,s,i,o,h="static",r="bubbles",n){super(t,s,i,r,n.label),e(this,"bubbleType"),e(this,"_color"),e(this,"neighbors",[]),e(this,"_diameter"),this.bubbleType=h,this._color=n,this._diameter=o,this.scene.add.existing(this),this.setBubbleSize(),this.initPhysics()}get color(){return this._color}setStatic(){this.bubbleType="static"}pop(){this.destroy()}fall(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.enable=!0,this.body.setVelocityY(200))}shot(t,e=600){if("shooting"!==this.bubbleType)return;const s=t.x-this.x,i=t.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const t=s/o,h=i/o;this.body.setVelocity(t*e,h*e)}}disablePhysics(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.setVelocity(0,0),this.body.enable=!1)}addNeighbor(t){this.neighbors.includes(t)||this.neighbors.push(t)}removeNeighbor(t){const e=this.neighbors.indexOf(t);-1!==e&&this.neighbors.splice(e,1)}setBubbleSize(){const t=this.width,e=this.height;if(t>0&&e>0){const e=this._diameter/t;this.setScale(e)}else this.once(Phaser.Loader.Events.COMPLETE,(()=>{const t=this._diameter/this.width;this.setScale(t)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0))}}const a=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];function l(){const t=Math.floor(Math.random()*a.length);return{label:a[t].label,color:a[t].color}}class c{constructor(t,s,i,o,h){e(this,"bubblesGroup"),e(this,"grid"),e(this,"bubbleWidth"),this.bubbleWidth=h,this.grid=Array.from({length:i},(()=>Array(s).fill(null))),this.createGrid(t,s,i,o)}createGrid(t,e,s,i){this.bubblesGroup=new Phaser.GameObjects.Group(t);const o=this.bubbleWidth/2,h=.866*this.bubbleWidth;for(let r=0;r<s;r++){const s=r%2==0,a=s?o:0;for(let c=0;c<e-(s?1:0);c++){const e=o+c*this.bubbleWidth+a,s=new n(t,e,o+r*h,this.bubbleWidth,"static",i,l());this.bubblesGroup.add(s),this.grid[r][c]=s}}}addBubble(t,e,s,i,o){const{row:h,col:r}=this.findClosestGridPosition(e,s);if(!this.isPositionOccupied(h,r)){const e=this.calculateBubbleX(r,h),s=this.calculateBubbleY(h),a=new n(t,e,s,this.bubbleWidth,"static",i,o);this.bubblesGroup.add(a),this.grid[h][r]=a}}findClosestGridPosition(t,e){const s=this.bubbleWidth/2,i=Math.round((e-s)/(s*Math.sqrt(3)));return{row:i,col:Math.round((t-s-(i%2==0?s:0))/this.bubbleWidth)}}isPositionOccupied(t,e){var s;return null!==(null==(s=this.grid[t])?void 0:s[e])}calculateBubbleX(t,e){const s=this.bubbleWidth/2,i=e%2==0?s:0;return s+t*this.bubbleWidth+i}calculateBubbleY(t){return this.bubbleWidth/2+t*(.866*this.bubbleWidth)}}class b extends Phaser.Scene{constructor(){super({key:"GameScene"}),e(this,"shootingBubble"),e(this,"aimer"),e(this,"cols"),e(this,"rows")}create(){this.cols=15,this.rows=10;const t=new Phaser.GameObjects.Sprite(this,0,0,"background");this.add.existing(t),new c(this,this.cols,this.rows,"bubbles",this.scale.width/this.cols),this.spawnShootingBubble()}spawnShootingBubble(){this.shootingBubble&&this.shootingBubble.destroy(),this.aimer&&this.aimer.destroy(),this.shootingBubble=new n(this,this.scale.width/2,this.scale.height-100,this.scale.width/this.cols,"shooting","bubbles",l()),new r(this,this.shootingBubble)}}const d={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[h,b],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(d)}));
