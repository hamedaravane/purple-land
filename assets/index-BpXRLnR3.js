var e=Object.defineProperty,t=(t,i,s)=>((t,i,s)=>i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[i]=s)(t,"symbol"!=typeof i?i+"":i,s);import{r as i,g as s}from"./phaser-CKN4kaq3.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const i of e)if("childList"===i.type)for(const e of i.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const o=s(i());class r extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}const h={label:"pink",color:15626403},n=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];class l extends o.GameObjects.Sprite{constructor(e,i,s,o,r=h,n=!1,l="bubbles"){super(e,i,s,l,r.label),t(this,"isShooter"),t(this,"color"),t(this,"diameter"),t(this,"gridCoordinates"),this.isShooter=n,this.color=r,this.diameter=o,this.setBubbleSize(),this.initPhysics(),this.scene.add.existing(this)}shot(e,t=600){if(!this.isShooter)return;const i=e.x-this.x,s=e.y-this.y,o=Math.sqrt(i*i+s*s);if(o>0){const e=i/o,r=s/o;this.body.setVelocity(e*t,r*t)}}setPosition(e,t){return this.scene.tweens.add({targets:this,x:e,y:t,duration:100,ease:"Power2"}),super.setPosition(e,t)}setBubbleSize(){if(this.width>0){const e=this.diameter/this.width;this.setScale(e)}else this.once(o.Loader.Events.COMPLETE,(()=>{const e=this.diameter/this.width;this.setScale(e)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}}const a={even:[[-1,0],[-1,1],[0,-1],[0,1],[1,0],[1,1]],odd:[[-1,-1],[-1,0],[0,-1],[0,1],[1,-1],[1,0]]};function c(){const e=Math.floor(Math.random()*n.length);return{label:n[e].label,color:n[e].color}}class d extends o.GameObjects.Group{constructor(e,i,s){super(e),t(this,"rows"),t(this,"cols"),t(this,"cellWidth"),t(this,"cellHeight"),t(this,"bubbleRadius"),t(this,"grid"),this.rows=i,this.cols=s,this.cellWidth=e.scale.width/s,this.bubbleRadius=this.cellWidth/2,this.cellHeight=.866*this.cellWidth;const o=e.scale.height-100-this.cellHeight,r=Math.floor(o/this.cellHeight);this.grid=Array.from({length:r},(()=>Array(s).fill(null)))}createGrid(){for(let e=0;e<this.rows;e++){const t=e%2==0,i=t?this.bubbleRadius:0,s=this.cols-(t?1:0);for(let o=0;o<s;o++){const t=this.normalize(this.bubbleRadius+o*this.cellWidth+i),s=this.normalize(this.bubbleRadius+e*this.cellHeight),r=new l(this.scene,t,s,this.cellWidth,c());r.gridCoordinates={row:e,col:o},this.add(r),this.grid[e][o]=r}}}addBubbleToGrid(e){const{row:t,col:i}=e.gridCoordinates;this.grid[t][i]=e,this.add(e)}removeBubble(e){const{row:t,col:i}=e.gridCoordinates;this.grid[t]&&this.grid[t][i]===e&&(this.grid[t][i]=null),this.remove(e,!1),e.destroy()}popConnectedBubbles(e){const t=this.findConnectedSameColor(e);t.length>=3&&t.forEach((e=>this.removeBubble(e)))}findConnectedSameColor(e){const t=new Set,i=[e];for(;i.length>0;){const s=i.shift();if(!t.has(s)){t.add(s);for(const o of this.getNeighbors(s))o&&!t.has(o)&&o.color.color===e.color.color&&i.push(o)}}return Array.from(t)}getNeighbors(e){const{row:t,col:i}=e.gridCoordinates,s=a[t%2==0?"even":"odd"],o=[];for(const[r,h]of s){const e=t+r,s=i+h;if(this.isValidCell(e,s)){const t=this.grid[e][s];t&&o.push(t)}}return o}snapBubbleToGrid(e){const{snappedX:t,snappedY:i,row:s,col:o}=this.getNearestGridPosition(e.x,e.y);e.setPosition(t,i),e.gridCoordinates={row:s,col:o},this.addBubbleToGrid(e)}getNearestGridPosition(e,t){let i=Math.round((t-this.bubbleRadius)/this.cellHeight);i<0&&(i=0);const s=i%2==0;let o;o=s?Math.round(e/this.cellWidth-1):Math.round(e/this.cellWidth-.5),o<0&&(o=0);const r=s?this.cellWidth*(o+1):this.cellWidth*(o+.5),h=this.bubbleRadius+i*this.cellHeight;return{snappedX:this.normalize(r),snappedY:this.normalize(h),row:i,col:o}}getChildren(){return super.getChildren()}isValidCell(e,t){return e>=0&&e<this.rows&&t>=0&&t<this.cols}getCellWidth(){return this.cellWidth}normalize(e,t=2){return parseFloat(e.toFixed(t))}}class b extends o.GameObjects.Graphics{constructor(e,i){super(e),t(this,"origin"),t(this,"bubble"),t(this,"dashLength",10),t(this,"gapLength",5),t(this,"aimColor"),t(this,"target"),this.bubble=i,this.origin=new o.Math.Vector2(i.x,i.y),this.target=new o.Math.Vector2(0,0),this.aimColor=i.color.color,e.add.existing(this),this.registerInputListeners()}registerInputListeners(){const e=this.scene.input;e.on("pointerdown",this.onPointerDown,this),e.on("pointermove",this.onPointerMove,this),e.on("pointerup",this.onPointerUp,this)}onPointerDown(e){this.updateTarget(e),this.redrawAimingLine(e)}onPointerMove(e){e.isDown&&(this.updateTarget(e),this.redrawAimingLine(e))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(e){this.target.set(e.x,e.y)}redrawAimingLine(e){this.clear(),this.lineStyle(1,this.aimColor);const t=o.Math.Angle.Between(this.origin.x,this.origin.y,e.x,e.y),i=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),s=new o.Math.Vector2(e.x+Math.cos(t)*i,e.y+Math.sin(t)*i);this.drawDashedLine(this.origin,new o.Math.Vector2(e.x,e.y)),this.drawDashedLine(new o.Math.Vector2(e.x,e.y),s)}drawDashedLine(e,t){const i=o.Math.Distance.Between(e.x,e.y,t.x,t.y),s=o.Math.Angle.Between(e.x,e.y,t.x,t.y);let r=i,h=e.clone();for(;r>0;){const e=Math.min(this.dashLength,r),t=new o.Math.Vector2(h.x+Math.cos(s)*e,h.y+Math.sin(s)*e);this.moveTo(h.x,h.y),this.lineTo(t.x,t.y),h.set(t.x+Math.cos(s)*this.gapLength,t.y+Math.sin(s)*this.gapLength),r-=this.dashLength+this.gapLength}this.strokePath()}destroy(...e){const t=this.scene.input;t.off("pointerdown",this.onPointerDown,this),t.off("pointermove",this.onPointerMove,this),t.off("pointerup",this.onPointerUp,this),super.destroy(...e)}}class u{constructor(e,i,s){t(this,"scene"),t(this,"bubbleGrid"),t(this,"aimer"),t(this,"shootingBubble"),this.scene=e,this.bubbleGrid=new d(e,i,s),this.scene.add.existing(this.bubbleGrid)}createGrid(){this.bubbleGrid.createGrid()}spawnNewShootingBubble(){var e;null==(e=this.aimer)||e.destroy(),this.shootingBubble=new l(this.scene,this.scene.scale.width/2,this.scene.scale.height-100,this.bubbleGrid.getCellWidth(),c(),!0),this.aimer=new b(this.scene,this.shootingBubble)}checkCollision(){this.bubbleGrid.getChildren().forEach((e=>{this.isOverlap(this.shootingBubble,e)&&(this.shootingBubble.body.setVelocity(0,0),this.bubbleGrid.snapBubbleToGrid(this.shootingBubble),this.bubbleGrid.popConnectedBubbles(this.shootingBubble),this.spawnNewShootingBubble())}))}isOverlap(e,t){const i=e.x-t.x,s=e.y-t.y;return i*i+s*s<=e.diameter*t.diameter}}class g extends Phaser.Scene{constructor(){super({key:"GameScene"}),t(this,"bubbleManager")}create(){this.add.image(this.scale.width/2,this.scale.height/2,"background"),this.bubbleManager=new u(this,10,14),this.bubbleManager.createGrid(),this.bubbleManager.spawnNewShootingBubble()}update(){this.bubbleManager.checkCollision()}}const p={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[r,g],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(p)}));
