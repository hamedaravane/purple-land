var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const o=i(s());class n extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}class h extends o.GameObjects.Sprite{constructor(e,s,i,o,n="static",h="bubbles",r){super(e,s,i,h,r.label),t(this,"_bubbleType"),t(this,"_color"),t(this,"_width"),this._bubbleType=n,this._color=r,this._width=o,this.scene.add.existing(this),this.setBubbleSize(),this.initPhysics()}get color(){return this._color}shot(e,t=600){const s=e.x-this.x,i=e.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const e=s/o,n=i/o;this.body.setVelocity(e*t,n*t)}}checkCollision(e){for(const t of e.getBubbles())if(this.isOverlapping(t))return t;return null}snapTo(e,t){this.scene.tweens.add({targets:this,x:e,y:t,duration:100,ease:"Power2"})}isOverlapping(e){const t=this.x-e.x,s=this.y-e.y;return Math.sqrt(t*t+s*s)<this._width}setBubbleSize(){if(this.width>0){const e=this._width/this.width;this.setScale(e)}else this.once(o.Loader.Events.COMPLETE,(()=>{const e=this._width/this.width;this.setScale(e)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}destroy(...e){super.destroy(...e)}}class r extends o.GameObjects.Graphics{constructor(e,s){super(e),t(this,"origin"),t(this,"bubble"),t(this,"dashLength",10),t(this,"gapLength",5),t(this,"aimColor"),t(this,"target"),this.bubble=s,this.origin=new o.Math.Vector2(s.x,s.y),this.target=new o.Math.Vector2(0,0),this.aimColor=s.color.color,e.add.existing(this),this.registerInputListeners()}registerInputListeners(){const e=this.scene.input;e.on("pointerdown",this.onPointerDown,this),e.on("pointermove",this.onPointerMove,this),e.on("pointerup",this.onPointerUp,this)}onPointerDown(e){this.updateTarget(e),this.redrawAimingLine(e)}onPointerMove(e){e.isDown&&(this.updateTarget(e),this.redrawAimingLine(e))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(e){this.target.set(e.x,e.y)}redrawAimingLine(e){this.clear(),this.lineStyle(1,this.aimColor);const t=o.Math.Angle.Between(this.origin.x,this.origin.y,e.x,e.y),s=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),i=new o.Math.Vector2(e.x+Math.cos(t)*s,e.y+Math.sin(t)*s);this.drawDashedLine(this.origin,new o.Math.Vector2(e.x,e.y)),this.drawDashedLine(new o.Math.Vector2(e.x,e.y),i)}drawDashedLine(e,t){const s=o.Math.Distance.Between(e.x,e.y,t.x,t.y),i=o.Math.Angle.Between(e.x,e.y,t.x,t.y);let n=s,h=e.clone();for(;n>0;){const e=Math.min(this.dashLength,n),t=new o.Math.Vector2(h.x+Math.cos(i)*e,h.y+Math.sin(i)*e);this.moveTo(h.x,h.y),this.lineTo(t.x,t.y),h.set(t.x+Math.cos(i)*this.gapLength,t.y+Math.sin(i)*this.gapLength),n-=this.dashLength+this.gapLength}this.strokePath()}destroy(...e){const t=this.scene.input;t.off("pointerdown",this.onPointerDown,this),t.off("pointermove",this.onPointerMove,this),t.off("pointerup",this.onPointerUp,this),super.destroy(...e)}}const l=[{label:"orange",color:16081665},{label:"yellow",color:16109829},{label:"cyan",color:63127},{label:"light-blue",color:10150133},{label:"purple",color:9269719},{label:"pink",color:15626403}];function a(){const e=Math.floor(Math.random()*l.length);return{label:l[e].label,color:l[e].color}}class c{constructor(e,s,i){t(this,"scene"),t(this,"bubblesGroup"),t(this,"shootingBubble"),t(this,"rows"),t(this,"cols"),t(this,"cellWidth"),t(this,"cellHeight"),t(this,"bubbleRadius"),t(this,"onOverlap",(()=>{this.shootingBubble.body.setVelocity(0,0)})),this.scene=e,this.bubblesGroup=this.scene.add.group(),this.rows=s,this.cols=i,this.cellWidth=this.scene.scale.width/i,this.bubbleRadius=this.cellWidth/2,this.cellHeight=.86602540378*this.cellWidth}createGrid(){for(let e=0;e<this.rows;e++){const t=e%2==0,s=this.cols-(t?1:0);for(let i=0;i<s;i++){const t=this.getPosition(i,e),s=new h(this.scene,t.x,t.y,this.cellWidth,"static","bubbles",a());this.bubblesGroup.add(s)}}}spawnShootingBubble(){this.shootingBubble=new h(this.scene,this.scene.scale.width/2,this.scene.scale.height-100,this.cellWidth,"shooting","bubbles",{label:"cyan",color:63127}),this.shootingBubble.name="shooting",new r(this.scene,this.shootingBubble),this.checkOverlapForBubbleGroup()}addExistingBubble(e){return this.bubblesGroup.add(e),e}removeBubble(e){this.bubblesGroup.remove(e,!0,!0)}checkOverlapForBubbleGroup(){this.bubblesGroupChildren.forEach((e=>{this.addOverlap(e)}))}addOverlap(e){return this.scene.physics.add.overlap(this.shootingBubble,e,this.onOverlap,void 0,this)}get bubblesGroupChildren(){return this.bubblesGroup.getChildren()}getPosition(e,t){const s=t%2==0?this.bubbleRadius:0;return{x:this.normalize(this.bubbleRadius+e*this.cellWidth+s),y:this.normalize(this.bubbleRadius+t*this.cellHeight)}}normalize(e,t=2){return parseFloat(e.toFixed(t))}}class b extends Phaser.Scene{constructor(){super({key:"GameScene"}),t(this,"bubbleManager")}create(){this.bubbleManager=new c(this,2,5),this.bubbleManager.createGrid(),this.bubbleManager.spawnShootingBubble()}}const d={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[n,b],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(d)}));
