var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const o=i(s());class n extends o.Scene{constructor(){super({key:"BootScene"})}preload(){}create(){this.scene.start("GameScene")}}class r extends Phaser.GameObjects.Sprite{constructor(t,s,i,o,n="static",r=16777215,h){super(t,s,i,o,h),e(this,"bubbleType"),e(this,"_color"),this.bubbleType=n,this._color=r,t.add.existing(this),"shooting"===n&&this.enablePhysics()}get color(){return this._color}pop(){this.destroy()}shot(t,e=600){if("shooting"===this.bubbleType){const s=t.x-this.x,i=t.y-this.y,o=Math.sqrt(s**2+i**2);if(o>0){const t=s/o,n=i/o;this.body.setVelocity(t*e,n*e)}}}enablePhysics(){if(!this.scene.physics.world)return void console.error("Physics system not initialized in the scene.");this.scene.physics.add.existing(this);const t=this.body;t.setCollideWorldBounds(!0),t.setVelocity(0,0)}disablePhysics(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.setVelocity(0,0),this.body.enable=!1)}}class h extends o.GameObjects.Graphics{constructor(t,s){super(t),e(this,"fromX"),e(this,"fromY"),e(this,"color"),e(this,"bubble"),e(this,"targetX",0),e(this,"targetY",0),e(this,"dashLength",10),e(this,"gapLength",5),this.fromX=s.x,this.fromY=s.y,this.color=s.color,this.bubble=s,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.input.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.clear(),this.updateTargetPosition(t),this.drawAimLine(t)}onPointerMove(t){t.isDown&&(this.clear(),this.updateTargetPosition(t),this.drawAimLine(t))}onPointerUp(){this.clear(),this.targetX&&this.targetY&&this.bubble.shot({x:this.targetX,y:this.targetY})}updateTargetPosition(t){this.targetX=t.x,this.targetY=t.y}drawAimLine(t){this.lineStyle(2,this.color),this.drawDashedLine(this.fromX,this.fromY,t.x,t.y);const e=o.Math.Angle.Between(this.fromX,this.fromY,t.x,t.y),s=Math.sqrt(this.scene.scale.width**2+this.scene.scale.height**2),i=t.x+Math.cos(e)*s,n=t.y+Math.sin(e)*s;this.drawDashedLine(t.x,t.y,i,n)}drawDashedLine(t,e,s,i){const n=o.Math.Distance.Between(t,e,s,i),r=o.Math.Angle.Between(t,e,s,i);let h=n,a=t,c=e;for(;h>0;){const t=Math.min(this.dashLength,h),e=a+Math.cos(r)*t,s=c+Math.sin(r)*t;this.moveTo(a,c),this.lineTo(e,s),h-=this.dashLength,a=e+Math.cos(r)*this.gapLength,c=s+Math.sin(r)*this.gapLength,h-=this.gapLength}this.strokePath()}}class a extends o.Scene{constructor(){super({key:"GameScene"}),e(this,"shootingBubble")}create(){this.shootingBubble=new r(this,this.cameras.main.width/2,this.cameras.main.height-100,"","shooting"),new h(this,this.shootingBubble)}}const c={type:o.AUTO,width:600,height:800,scene:[n,a],parent:"game-container",physics:{default:"arcade",arcade:{gravity:{x:NaN,y:0}}}};window.addEventListener("load",(()=>{new o.Game(c)}));
