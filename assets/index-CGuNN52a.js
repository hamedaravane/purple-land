var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();const o=i(s());class r extends o.Scene{constructor(){super({key:"BootScene"})}preload(){this.load.image("background","assets/images/background/background.png"),this.load.atlas("bubbles","assets/images/bubbles/bubbles_spritesheet.png","assets/images/bubbles/bubbles_spritesheet.json")}create(){this.scene.start("GameScene")}}const h={label:"pink",color:15626403};class n extends o.GameObjects.Sprite{constructor(t,s,i,o,r=h,n=!1,l="bubbles"){super(t,s,i,l,r.label),e(this,"isShooter"),e(this,"color"),e(this,"diameter"),e(this,"gridCoordinates"),this.isShooter=n,this.color=r,this.diameter=o,this.setBubbleSize(),this.initPhysics(),this.scene.add.existing(this)}shot(t,e=600){if(!this.isShooter)return;const s=t.x-this.x,i=t.y-this.y,o=Math.sqrt(s*s+i*i);if(o>0){const t=s/o,r=i/o;this.body.setVelocity(t*e,r*e)}}snapTo(t,e){this.scene.tweens.add({targets:this,x:t,y:e,duration:100,ease:"Power2"}),this.setPosition(t,e)}setBubbleSize(){if(this.width>0){const t=this.diameter/this.width;this.setScale(t)}else this.once(o.Loader.Events.COMPLETE,(()=>{const t=this.diameter/this.width;this.setScale(t)}))}initPhysics(){this.scene.physics.add.existing(this),this.body instanceof o.Physics.Arcade.Body&&(this.body.setCollideWorldBounds(!0),this.body.setVelocity(0,0),this.body.setBounce(1,1))}}const l={even:[[-1,0],[-1,1],[0,-1],[0,1],[1,0],[1,1]],odd:[[-1,-1],[-1,0],[0,-1],[0,1],[1,-1],[1,0]]};class a extends o.GameObjects.Group{constructor(t,s,i){super(t),e(this,"rows"),e(this,"cols"),e(this,"cellWidth"),e(this,"cellHeight"),e(this,"bubbleRadius"),e(this,"grid"),this.rows=s,this.cols=i,this.cellWidth=t.scale.width/i,this.bubbleRadius=this.cellWidth/2,this.cellHeight=.866*this.cellWidth,this.grid=Array.from({length:s},(()=>Array(i).fill(null)))}createGrid(){for(let t=0;t<this.rows;t++){const e=t%2==0,s=e?this.bubbleRadius:0,i=this.cols-(e?1:0);for(let o=0;o<i;o++){const e=this.normalize(this.bubbleRadius+o*this.cellWidth+s),i=this.normalize(this.bubbleRadius+t*this.cellHeight),r=new n(this.scene,e,i,this.cellWidth,h);r.gridCoordinates={row:t,col:o},this.add(r),this.grid[t][o]=r}}}addBubbleToGrid(t){const{row:e,col:s}=t.gridCoordinates;this.grid[e][s]=t,this.add(t)}removeBubble(t){const{row:e,col:s}=t.gridCoordinates;this.grid[e]&&this.grid[e][s]===t&&(this.grid[e][s]=null),this.remove(t,!1),t.destroy()}popConnectedBubbles(t){const e=this.findConnectedSameColor(t);e.length>=3&&e.forEach((t=>this.removeBubble(t)))}findConnectedSameColor(t){const e=new Set,s=[t];for(;s.length>0;){const i=s.shift();if(!e.has(i)){e.add(i);for(const o of this.getNeighbors(i))o&&!e.has(o)&&o.color.color===t.color.color&&s.push(o)}}return Array.from(e)}getNeighbors(t){const{row:e,col:s}=t.gridCoordinates,i=l[e%2==0?"even":"odd"],o=[];for(const[r,h]of i){const t=e+r,i=s+h;if(this.isValidCell(t,i)){const e=this.grid[t][i];e&&o.push(e)}}return o}getPositionByCoords(t,e){const s=e%2==0?this.bubbleRadius:0;return{x:this.bubbleRadius+t*this.cellWidth+s,y:this.bubbleRadius+e*this.cellHeight}}getCoordsByPosition(t,e){let s=Math.floor((e-this.bubbleRadius)/this.cellHeight);s=o.Math.Clamp(s,0,this.rows-1);const i=s%2==0?this.bubbleRadius:0;let r=Math.floor((t-this.bubbleRadius-i)/this.cellWidth);return r=o.Math.Clamp(r,0,this.cols-1),{row:s,col:r}}getNearestGridPosition(t,e){let s=Math.round((e-this.bubbleRadius)/this.cellHeight);s<0&&(s=0);const i=s%2==0;let o;o=i?Math.round(t/this.cellWidth-1):Math.round(t/this.cellWidth-.5),o<0&&(o=0);const r=i?this.cellWidth*(o+1):this.cellWidth*(o+.5),h=this.bubbleRadius+s*this.cellHeight;return{snappedX:this.normalize(r),snappedY:this.normalize(h)}}isValidCell(t,e){return t>=0&&t<this.rows&&e>=0&&e<this.cols}getCellWidth(){return this.cellWidth}normalize(t,e=2){return parseFloat(t.toFixed(e))}}class d extends o.GameObjects.Graphics{constructor(t,s){super(t),e(this,"origin"),e(this,"bubble"),e(this,"dashLength",10),e(this,"gapLength",5),e(this,"aimColor"),e(this,"target"),this.bubble=s,this.origin=new o.Math.Vector2(s.x,s.y),this.target=new o.Math.Vector2(0,0),this.aimColor=s.color.color,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){const t=this.scene.input;t.on("pointerdown",this.onPointerDown,this),t.on("pointermove",this.onPointerMove,this),t.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.updateTarget(t),this.redrawAimingLine(t)}onPointerMove(t){t.isDown&&(this.updateTarget(t),this.redrawAimingLine(t))}onPointerUp(){this.clear(),this.target.equals(this.origin)||this.bubble.shot({x:this.target.x,y:this.target.y})}updateTarget(t){this.target.set(t.x,t.y)}redrawAimingLine(t){this.clear(),this.lineStyle(1,this.aimColor);const e=o.Math.Angle.Between(this.origin.x,this.origin.y,t.x,t.y),s=Math.sqrt(Math.pow(this.scene.scale.width,2)+Math.pow(this.scene.scale.height,2)),i=new o.Math.Vector2(t.x+Math.cos(e)*s,t.y+Math.sin(e)*s);this.drawDashedLine(this.origin,new o.Math.Vector2(t.x,t.y)),this.drawDashedLine(new o.Math.Vector2(t.x,t.y),i)}drawDashedLine(t,e){const s=o.Math.Distance.Between(t.x,t.y,e.x,e.y),i=o.Math.Angle.Between(t.x,t.y,e.x,e.y);let r=s,h=t.clone();for(;r>0;){const t=Math.min(this.dashLength,r),e=new o.Math.Vector2(h.x+Math.cos(i)*t,h.y+Math.sin(i)*t);this.moveTo(h.x,h.y),this.lineTo(e.x,e.y),h.set(e.x+Math.cos(i)*this.gapLength,e.y+Math.sin(i)*this.gapLength),r-=this.dashLength+this.gapLength}this.strokePath()}destroy(...t){const e=this.scene.input;e.off("pointerdown",this.onPointerDown,this),e.off("pointermove",this.onPointerMove,this),e.off("pointerup",this.onPointerUp,this),super.destroy(...t)}}class c{constructor(t,s,i){e(this,"scene"),e(this,"bubbleGrid"),e(this,"aimer"),e(this,"shootingBubble"),e(this,"overlapCollider"),this.scene=t,this.bubbleGrid=new a(t,s,i),this.scene.add.existing(this.bubbleGrid)}createGrid(){this.bubbleGrid.createGrid()}spawnNewShootingBubble(){var t,e;null==(t=this.overlapCollider)||t.destroy(),null==(e=this.aimer)||e.destroy(),this.shootingBubble=new n(this.scene,this.scene.scale.width/2,this.scene.scale.height-100,this.bubbleGrid.getCellWidth(),h,!0),this.aimer=new d(this.scene,this.shootingBubble),this.overlapCollider=this.scene.physics.add.overlap(this.shootingBubble,this.bubbleGrid.getChildren(),((t,e)=>{const s=t;if(!s||!e)return;s.body.setVelocity(0,0);const{snappedX:i,snappedY:o}=this.bubbleGrid.getNearestGridPosition(s.x,s.y);s.snapTo(i,o),s.gridCoordinates=this.bubbleGrid.getCoordsByPosition(i,o),this.bubbleGrid.addBubbleToGrid(s),this.bubbleGrid.popConnectedBubbles(s),this.spawnNewShootingBubble()}),void 0,this)}isOverlap(t,e){const s=t.x-e.x,i=t.y-e.y;return s*s+i*i<=t.diameter*e.diameter}}class b extends Phaser.Scene{constructor(){super({key:"GameScene"}),e(this,"bubbleManager")}create(){this.add.image(this.scale.width/2,this.scale.height/2,"background"),this.bubbleManager=new c(this,10,14),this.bubbleManager.createGrid(),this.bubbleManager.spawnNewShootingBubble()}}const u={type:o.AUTO,width:390,height:844,pixelArt:!1,title:"Purple Land",scene:[r,b],parent:"game-container",scale:{mode:o.Scale.RESIZE,autoCenter:o.Scale.CENTER_BOTH},physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(u)}));
