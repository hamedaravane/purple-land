var t=Object.defineProperty,s=(s,e,i)=>((s,e,i)=>e in s?t(s,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[e]=i)(s,"symbol"!=typeof e?e+"":e,i);import{r as e,g as i}from"./phaser-CKN4kaq3.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver((t=>{for(const e of t)if("childList"===e.type)for(const t of e.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&s(t)})).observe(document,{childList:!0,subtree:!0})}function s(t){if(t.ep)return;t.ep=!0;const s=function(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?s.credentials="include":"anonymous"===t.crossOrigin?s.credentials="omit":s.credentials="same-origin",s}(t);fetch(t.href,s)}}();const o=i(e());class r extends o.Scene{constructor(){super({key:"BootScene"})}preload(){}create(){this.scene.start("GameScene")}}class h extends Phaser.GameObjects.Sprite{constructor(t,e,i,o,r="static",h="Red"){super(t,e,i,`${h}`),s(this,"bubbleType"),s(this,"_color"),s(this,"neighbors",[]),s(this,"_diameter"),this.bubbleType=r,this._color=h,this._diameter=o,this.scene.add.existing(this),this.setBubbleSize(),this.initPhysics()}get color(){return this._color}setStatic(){this.bubbleType="static"}pop(){this.destroy()}fall(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.enable=!0,this.body.setVelocityY(200))}shot(t,s=600){if("shooting"!==this.bubbleType)return;const e=t.x-this.x,i=t.y-this.y,o=Math.sqrt(e*e+i*i);if(o>0){const t=e/o,r=i/o;this.body.setVelocity(t*s,r*s)}}disablePhysics(){this.body instanceof Phaser.Physics.Arcade.Body&&(this.body.setVelocity(0,0),this.body.enable=!1)}addNeighbor(t){this.neighbors.includes(t)||this.neighbors.push(t)}removeNeighbor(t){const s=this.neighbors.indexOf(t);-1!==s&&this.neighbors.splice(s,1)}setBubbleSize(){const t=this.width,s=this.height;if(t>0&&s>0){const s=this._diameter/t;this.setScale(s)}else this.once(Phaser.Loader.Events.COMPLETE,(()=>{const t=this._diameter/this.width;this.setScale(t)}))}initPhysics(){if(this.scene.physics.add.existing(this),this.body instanceof Phaser.Physics.Arcade.Body){const t=this._diameter/2;this.body.setCollideWorldBounds(!0),this.body.setCircle(t,-t,-t),this.body.setVelocity(0,0)}}}var n=(t=>(t[t.Red=16080992]="Red",t[t.Orange=16081665]="Orange",t[t.Yellow=16109829]="Yellow",t[t.LightGreen=10606216]="LightGreen",t[t.Green=5811254]="Green",t[t.Cyan=63127]="Cyan",t[t.LightBlue=10150133]="LightBlue",t[t.Purple=9269719]="Purple",t[t.Magenta=11945955]="Magenta",t[t.Pink=15626403]="Pink",t[t.Brown=11169619]="Brown",t))(n||{});function a(){const t=Object.keys(n);return t[Math.floor(Math.random()*t.length)]}class c extends o.GameObjects.Graphics{constructor(t,e){var i;super(t),s(this,"fromX"),s(this,"fromY"),s(this,"color"),s(this,"bubble"),s(this,"targetX",0),s(this,"targetY",0),s(this,"dashLength",10),s(this,"gapLength",5),this.fromX=e.x,this.fromY=e.y,this.color=(i=e.color,n[i]),this.bubble=e,t.add.existing(this),this.registerInputListeners()}registerInputListeners(){this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.input.on("pointerup",this.onPointerUp,this)}onPointerDown(t){this.clear(),this.updateTargetPosition(t),this.drawAimLine(t)}onPointerMove(t){t.isDown&&(this.clear(),this.updateTargetPosition(t),this.drawAimLine(t))}onPointerUp(){this.clear(),this.targetX&&this.targetY&&this.bubble.shot({x:this.targetX,y:this.targetY})}updateTargetPosition(t){this.targetX=t.x,this.targetY=t.y}drawAimLine(t){this.lineStyle(1,this.color),this.drawDashedLine(this.fromX,this.fromY,t.x,t.y);const s=o.Math.Angle.Between(this.fromX,this.fromY,t.x,t.y),e=Math.sqrt(this.scene.scale.width**2+this.scene.scale.height**2),i=t.x+Math.cos(s)*e,r=t.y+Math.sin(s)*e;this.drawDashedLine(t.x,t.y,i,r)}drawDashedLine(t,s,e,i){const r=o.Math.Distance.Between(t,s,e,i),h=o.Math.Angle.Between(t,s,e,i);let n=r,a=t,c=s;for(;n>0;){const t=Math.min(this.dashLength,n),s=a+Math.cos(h)*t,e=c+Math.sin(h)*t;this.moveTo(a,c),this.lineTo(s,e),n-=this.dashLength,a=s+Math.cos(h)*this.gapLength,c=e+Math.sin(h)*this.gapLength,n-=this.gapLength}this.strokePath()}destroy(...t){this.scene&&this.scene.input&&(this.scene.input.off("pointerdown",this.onPointerDown,this),this.scene.input.off("pointermove",this.onPointerMove,this),this.scene.input.off("pointerup",this.onPointerUp,this)),super.destroy(...t)}}class l extends Phaser.GameObjects.Group{constructor(t,e,i,o){super(t),s(this,"grid",[]),this.radius=e,this.rows=i,this.cols=o,this.generateGrid()}handleCollision(t,s){t.color===s.color?(this.chainPop(s,t.color),t.pop(),this.dropFloatingBubbles()):this.attachShootingBubble(t)}generateGrid(){for(let t=1;t<this.rows;t++){this.grid[t]=[];const s=t%2==1;for(let e=0;s?e<this.cols:e<this.cols-1;e++){const i=this.createSingleBubble(t,e,s);this.grid[t][e]=i,this.linkNeighbors(i,t,e)}}}createSingleBubble(t,s,e){const i=e?this.radius+s*this.radius*2:2*this.radius+s*this.radius*2,o=t*this.radius*Math.sqrt(3),r=a(),n=new h(this.scene,i,o,2*this.radius,"static",r);return this.add(n),n}attachShootingBubble(t){let{rowIndex:s,colIndex:e}=this.findNearestGridPosition(t.x,t.y);const{r:i,c:o}=this.findClosestEmptySlot(s,e),{x:r,y:h}=this.computeBubblePosition(i,o);t.setPosition(r,h),t.setStatic(),this.add(t),this.grid[i]||(this.grid[i]=[]),this.grid[i][o]=t,this.linkNeighbors(t,i,o)}findNearestGridPosition(t,s){const e=Math.round(s/(this.radius*Math.sqrt(3))),i=e%2==1?this.radius:2*this.radius;return{rowIndex:e,colIndex:Math.round((t-i)/(2*this.radius))}}findClosestEmptySlot(t,s){const e=new Set,i=[{r:t,c:s}];for(;i.length;){const{r:t,c:s}=i.shift();if(!this.grid[t]||!this.grid[t][s])return{r:t,c:s};e.add(`${t},${s}`),this.getGridNeighbors(t,s).forEach((t=>{const s=`${t.r},${t.c}`;e.has(s)||i.push(t)}))}return{r:t,c:s}}getGridNeighbors(t,s){return[{r:t,c:s-1},{r:t,c:s+1},{r:t-1,c:s},{r:t-1,c:s+1},{r:t+1,c:s},{r:t+1,c:s-1}]}computeBubblePosition(t,s){return{x:t%2==1?this.radius+s*this.radius*2:2*this.radius+s*this.radius*2,y:t*this.radius*Math.sqrt(3)}}linkNeighbors(t,s,e){const i=s%2==1;[{row:0,col:-1},{row:0,col:1},{row:-1,col:0},{row:-1,col:1},{row:1,col:0},{row:1,col:-1}].forEach((({row:o,col:r})=>{var n;const a=s+o,c=e+r+(i&&0!==o?1:0),l=null==(n=this.grid[a])?void 0:n[c];l&&l instanceof h&&(t.addNeighbor(l),l.addNeighbor(t))}))}chainPop(t,s){const e=[t],i=new Set;for(;e.length;){const t=e.pop();i.has(t)||(i.add(t),t.color===s&&(t.pop(),this.removeFromGrid(t),t.neighbors.filter((t=>t.color===s&&!i.has(t))).forEach((t=>e.push(t)))))}}removeFromGrid(t){var s;for(let e=0;e<this.grid.length;e++)for(let i=0;i<((null==(s=this.grid[e])?void 0:s.length)||0);i++)this.grid[e][i]===t&&(this.grid[e][i]=void 0);this.remove(t,!0,!1)}dropFloatingBubbles(){var t;const s=new Set;if(this.grid[1])for(let e=0;e<this.grid[1].length;e++){const t=this.grid[1][e];t&&this.bfsMarkConnected(t,s)}for(let e=0;e<this.grid.length;e++)for(let i=0;i<((null==(t=this.grid[e])?void 0:t.length)||0);i++){const t=this.grid[e][i];t&&!s.has(t)&&(t.fall(),this.removeFromGrid(t))}}bfsMarkConnected(t,s){const e=[t];for(;e.length;){const t=e.shift();s.has(t)||(s.add(t),t.neighbors.forEach((t=>{s.has(t)||e.push(t)})))}}}class d extends Phaser.Scene{constructor(){super({key:"GameScene"}),s(this,"shootingBubble"),s(this,"staticBubbles"),s(this,"aimer")}preload(){this.load.image("Red","assets/images/Red.png"),this.load.image("Orange","assets/images/Orange.png"),this.load.image("Yellow","assets/images/Yellow.png"),this.load.image("LightGreen","assets/images/LightGreen.png"),this.load.image("Green","assets/images/Green.png"),this.load.image("Cyan","assets/images/Cyan.png"),this.load.image("LightBlue","assets/images/LightBlue.png"),this.load.image("Purple","assets/images/Purple.png"),this.load.image("Magenta","assets/images/Magenta.png"),this.load.image("Pink","assets/images/Pink.png"),this.load.image("Brown","assets/images/Brown.png")}create(){const t=this.cameras.main.width/14/2;this.staticBubbles=new l(this,t,9,14),this.add.existing(this.staticBubbles),this.spawnShootingBubble()}spawnShootingBubble(){this.shootingBubble&&this.shootingBubble.destroy(),this.aimer&&this.aimer.destroy();const t=this.cameras.main.width,s=this.cameras.main.height,e=t/14/2;this.shootingBubble=new h(this,t/2,s-100,2*e,"shooting",a()),this.physics.add.existing(this.shootingBubble),this.aimer=new c(this,this.shootingBubble),this.physics.add.collider(this.shootingBubble,this.staticBubbles,((t,s)=>this.onBubbleCollision(t,s)))}onBubbleCollision(t,s){this.staticBubbles.handleCollision(t,s),this.spawnShootingBubble()}}const g={type:o.AUTO,width:360,height:800,pixelArt:!1,title:"Purple Land",scene:[r,d],parent:"game-container",physics:{default:"arcade",arcade:{gravity:{x:0,y:0},debug:!1}}};window.addEventListener("load",(()=>{new o.Game(g)}));
